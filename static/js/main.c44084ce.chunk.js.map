{"version":3,"sources":["firebase.js","components/header/Header.js","components/display-content/DisplayImg.js","components/display-content/DisplayVideo.js","App.js","serviceWorker.js","index.js","components/button/Button.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Header","react_default","a","createElement","className","action","onSubmit","this","props","handleSubmit","type","id","min","onChange","handleChange","Button","value","Component","DisplayImg","title","src","img","alt","description","onClick","handleSave","DisplayVideo","allowFullScreen","video","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","preventDefault","database","ref","push","state","apod","console","log","savedAPOD","setState","chosenDate","target","queryDate","getAPOD","saveDate","axios","method","url","dataType","params","date","hd","then","response","data","catch","error","alert","removeItem","itemKey","remove","_this2","on","newState","val","key","_this3","components_header_Header","media_type","display_content_DisplayImg","hdurl","explanation","display_content_DisplayVideo","map","item","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","process","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n"],"mappings":"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","file":"static/js/main.c44084ce.chunk.js","sourcesContent":["import firebase from 'firebase';\n// Initialize Firebase\nvar config = {\n  apiKey: \"AIzaSyDjIqqQC5_4tcY5nfekpMBqvOWZL6CaqO8\",\n  authDomain: \"apod-react.firebaseapp.com\",\n  databaseURL: \"https://apod-react.firebaseio.com\",\n  projectId: \"apod-react\",\n  storageBucket: \"apod-react.appspot.com\",\n  messagingSenderId: \"561404142566\"\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;","import React, { Component } from 'react';\nimport Button from '../button/Button.js';\nimport './Header.css';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"wrapper\">\n                <h1>Our Amazing Universe</h1>\n                <p>Choose a date and hit the button to see how incredible our universe is:</p>\n                <form action=\"#main\" onSubmit={this.props.handleSubmit}>\n                    <input type=\"date\" id=\"selectDate\" min=\"1995-06-16\" onChange={this.props.handleChange}></input>\n                    <Button value=\"Show me!\" />\n                </form>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './DisplayContent.css';\n\nconst DisplayImg = props => {\n    return (\n        <main className=\"wrapper\">\n            <h2>{props.title}</h2>\n            {/* <p>Date: {props.date}</p> */}\n            <div>\n                <img src={props.img} alt={props.title}></img>\n            </div>\n            <p>{props.description}</p>\n\n            <input type=\"submit\" value=\"Save this content\" onClick={props.handleSave}></input>\n        </main>\n    )\n}\n\nexport default DisplayImg\n","import React from 'react';\nimport './DisplayContent.css';\n\nconst DisplayVideo = props => {\n    return (\n        <main className=\"wrapper\">\n            <h2>{props.title}</h2>\n            {/* <p>Date: {props.date}</p> */}\n            <div className=\"containerVideo\">\n                <iframe className=\"video\" allowFullScreen src={props.video} title={props.title}></iframe>\n            </div>\n            <p>{props.description}</p>\n\n            <input type=\"submit\" value=\"Save this content\" onClick={props.handleSave}></input>\n        </main>\n    )\n}\n\nexport default DisplayVideo","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport firebase from './firebase.js';\nimport Header from './components/header/Header.js';\nimport DisplayImg from './components/display-content/DisplayImg.js';\nimport DisplayVideo from './components/display-content/DisplayVideo.js';\n// import DisplaySaved from './components/display-content/DisplaySaved.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      apod: [],\n      chosenDate: '',\n      savedAPOD: []\n    };\n  }\n  // create a constructor and call super\n  // create an empty object to set initial state\n  // object must have: title, src and description\n\n  // listen when button is clicked\n\n  // fire the call to the NASA API - today is the default\n\n  handleSave = (event) => {\n    event.preventDefault();\n\n    const dbRef = firebase.database().ref();\n    \n    dbRef.push(this.state.apod)\n    console.log(this.state.savedAPOD)\n  }\n\n  componentDidMount(){\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', response => {\n      const newState = [];\n      const data = response.val();\n\n      for (let key in data) {\n        newState.push({\n          key: key,\n          title: data[key],\n        })\n\n        // console.log(newState)\n\n        this.setState({\n          savedAPOD: newState\n        })\n      }\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      chosenDate: event.target.value\n    })\n  }\n\n  queryDate = () => {\n    return this.state.chosenDate\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.getAPOD();\n  }\n\n  saveDate = (event) => {\n    event.preventDefault();\n    this.setState({\n      chosenDate: event.target.id\n    })\n\n    this.getAPOD();\n  }\n\n  // create a function to get APOD\n  getAPOD = () => {\n    axios ({\n      method: \"GET\",\n      url: \"https://api.nasa.gov/planetary/apod?api_key=iRBxHa8umb23CV7ksEzwtsQ7CCH8jpuUSvuXTUf8\",\n      dataType: \"jsonp\",\n      params: {\n        date: this.state.chosenDate,\n        hd: true\n      }\n    }).then(response => {\n      response = response.data;\n      this.setState({\n        apod: response,\n      });\n    }).catch(function(error){\n      alert(\"Server error. Please try again later.\")\n    });\n  }\n\n  removeItem = (itemKey) => {\n    const dbRef = firebase.database().ref(itemKey);\n    dbRef.remove();\n  }\n\n  // change the state (setState) with the api response\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* Header.js */}\n        {/* Create an H1 to hold website's name */}\n        {/* Create a button - when clicks it will fire the API call */}\n        <Header\n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n        />\n\n\n        {\n          this.state.apod.media_type === \"image\" ? (\n            <DisplayImg\n              key={this.state.apod.date}\n              title={this.state.apod.title}\n              // date={this.state.apod.date}\n              img={this.state.apod.hdurl}\n              description={this.state.apod.explanation}\n              handleSave={this.handleSave}\n            />\n          ) : (\n            <DisplayVideo\n              key={this.state.apod.date}\n              title={this.state.apod.title}\n              // date={this.state.apod.date}\n              video={this.state.apod.url}\n              description={this.state.apod.explanation}\n              handleSave={this.handleSave}\n            />\n          )\n        }\n        \n        <div className=\"wrapper displaySaved\">\n          <h2>Saved items:</h2>\n          {\n            this.state.savedAPOD.map((item) => {\n              return (\n                <div className=\"savedBox\" key={item.key}>\n                  <button className=\"savedItem\" id={item.title.date} onClick={this.saveDate}>{item.title.title}</button>\n                  <button className=\"deleteItem\" onClick={() => this.removeItem(item.key)}><span>Remove:</span> {item.title.title}</button>\n                </div>\n              )\n            })\n          }\n        </div>\n        \n          \n        {/* Main.js */}\n        {/* Map state to get title, picture and description */}\n        {/* Create a div to show the title, picture and description */}\n        \n        \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport './Button.css'\n\nconst Button = props => {\n    return (\n        <button className={process.className}>{props.value}</button>\n    )\n}\n\nexport default Button"],"sourceRoot":""}