{"version":3,"sources":["firebase.js","components/header/Header.js","components/display-content/DisplayImg.js","components/display-content/DisplayVideo.js","App.js","serviceWorker.js","index.js","components/button/Button.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Header","react_default","a","createElement","className","action","onSubmit","this","props","handleSubmit","type","id","min","onChange","handleChange","Button","value","Component","DisplayImg","title","src","img","alt","description","onClick","handleSave","DisplayVideo","allowFullScreen","video","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","preventDefault","database","ref","push","state","apod","setState","chosenDate","target","getAPOD","saveDate","axios","method","url","dataType","params","date","hd","then","response","data","catch","error","alert","removeItem","itemKey","remove","savedAPOD","_this2","on","newState","val","key","_this3","components_header_Header","media_type","display_content_DisplayImg","hdurl","explanation","display_content_DisplayVideo","map","item","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","process","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n"],"mappings":"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","file":"static/js/main.15f12bb9.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n// Initialize Firebase\r\nvar config = {\r\n  apiKey: \"AIzaSyDjIqqQC5_4tcY5nfekpMBqvOWZL6CaqO8\",\r\n  authDomain: \"apod-react.firebaseapp.com\",\r\n  databaseURL: \"https://apod-react.firebaseio.com\",\r\n  projectId: \"apod-react\",\r\n  storageBucket: \"apod-react.appspot.com\",\r\n  messagingSenderId: \"561404142566\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport Button from '../button/Button.js';\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"wrapper\">\r\n                <h1>Our Amazing Universe</h1>\r\n                <p>Choose a date and hit the button to see how incredible our universe is:</p>\r\n                <form action=\"#main\" onSubmit={this.props.handleSubmit}>\r\n                    <input type=\"date\" id=\"selectDate\" min=\"1995-06-16\" onChange={this.props.handleChange}></input>\r\n                    <Button value=\"Show me!\" />\r\n                </form>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './DisplayContent.css';\r\n\r\nconst DisplayImg = props => {\r\n    return (\r\n        <main className=\"wrapper\">\r\n            <h2>{props.title}</h2>\r\n            <div className=\"containerPhoto\">\r\n                <img src={props.img} alt={props.title}></img>\r\n            </div>\r\n            <p>{props.description}</p>\r\n\r\n            <input type=\"submit\" value=\"Save this content\" onClick={props.handleSave}></input>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default DisplayImg","import React from 'react';\r\nimport './DisplayContent.css';\r\n\r\nconst DisplayVideo = props => {\r\n    return (\r\n        <main className=\"wrapper\">\r\n            <h2>{props.title}</h2>\r\n            <div className=\"containerVideo\">\r\n                <iframe className=\"video\" allowFullScreen src={props.video} title={props.title}></iframe>\r\n            </div>\r\n            <p>{props.description}</p>\r\n\r\n            <input type=\"submit\" value=\"Save this content\" onClick={props.handleSave}></input>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default DisplayVideo","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport firebase from './firebase.js';\r\nimport Header from './components/header/Header.js';\r\nimport DisplayImg from './components/display-content/DisplayImg.js';\r\nimport DisplayVideo from './components/display-content/DisplayVideo.js';\r\n\r\n// create a constructor and call super\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // create an empty object to set initial state for astronomy picture of the day (APOD)\r\n      apod: [],\r\n      // create an empty state to hold the date (it'll be used to call the API)\r\n      chosenDate: '',\r\n      savedAPOD: []\r\n    };\r\n  } \r\n\r\n  // create a function to save the content in Firebase when the input \"Save this content\" in clicked\r\n  handleSave = (event) => {\r\n    //prevent to reload the page\r\n    event.preventDefault();\r\n    //create a const that holds the reference to the database\r\n    const dbRef = firebase.database().ref();\r\n    // add\r\n    dbRef.push(this.state.apod)\r\n  }\r\n\r\n  //create a componentDidMount method to get info from database\r\n  componentDidMount(){\r\n    //create a const that holds the reference to the database (because this is local here and in handleSave)\r\n    const dbRef = firebase.database().ref();\r\n    //use the FB method on to get the values in the database\r\n    dbRef.on('value', response => {\r\n      const newState = [];\r\n      const data = response.val();\r\n    // loop trough it to push each item in the new array newState\r\n      for (let key in data) {\r\n        newState.push({\r\n          key: key,\r\n          title: data[key],\r\n        })\r\n        //setState using newState\r\n        this.setState({\r\n          savedAPOD: newState\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  //create a function to handle the date return by queryDate\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      chosenDate: event.target.value\r\n    })\r\n  }\r\n\r\n  // create a function to handle the input submit to call the api and show the specific content\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    //call the function that will call the api\r\n    this.getAPOD();\r\n  }\r\n\r\n  //create a function to get the info called by the button saveDate\r\n  saveDate = (event) => {\r\n    //prevent page to reload\r\n    event.preventDefault();\r\n    //set the state of chosenDate to the date of the saved element selected \r\n    this.setState({\r\n      chosenDate: event.target.id\r\n    }, () => {\r\n      //call the function to show the saved content\r\n      //callback function because chosenDate must be defined before getApod is called\r\n      this.getAPOD();\r\n    }); \r\n  }\r\n\r\n  // create a function to get APOD\r\n  getAPOD = () => {\r\n    // fire the call to the NASA API - today is the query date default\r\n    axios ({\r\n      method: \"GET\",\r\n      url: \"https://api.nasa.gov/planetary/apod?api_key=iRBxHa8umb23CV7ksEzwtsQ7CCH8jpuUSvuXTUf8\",\r\n      dataType: \"jsonp\",\r\n      params: {\r\n        date: this.state.chosenDate,\r\n        hd: true\r\n      }\r\n    }).then(response => {\r\n      //set the response to be the setState apod\r\n      response = response.data;\r\n      this.setState({\r\n        apod: response,\r\n      });\r\n    }).catch(function(error){\r\n      //define an alert message when the api returns an error\r\n      alert(\"Server error. Please try again later.\")\r\n    });\r\n  }\r\n\r\n  //create a function to delete a saved item when the button is clicked\r\n  removeItem = (itemKey) => {\r\n    const dbRef = firebase.database().ref(itemKey);\r\n    dbRef.remove();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* Create and import Header.js */}\r\n        {/* Create an H1 to hold website's name */}\r\n        {/* Create a button - when clicks it will fire the API call */}\r\n        <Header\r\n          handleSubmit={this.handleSubmit}\r\n          handleChange={this.handleChange}\r\n        />\r\n\r\n        {/* Create and import files from DisplayContent folder*/}\r\n        {/* Create a div to show the title, picture and description */}\r\n        {\r\n          this.state.apod.media_type === \"image\" ? (\r\n            <DisplayImg\r\n              key={this.state.apod.date}\r\n              title={this.state.apod.title}\r\n              img={this.state.apod.hdurl}\r\n              description={this.state.apod.explanation}\r\n              handleSave={this.handleSave}\r\n            />\r\n          ) : (\r\n            <DisplayVideo\r\n              key={this.state.apod.date}\r\n              title={this.state.apod.title}\r\n              video={this.state.apod.url}\r\n              description={this.state.apod.explanation}\r\n              handleSave={this.handleSave}\r\n            />\r\n          )\r\n        }\r\n        {/* Div to show the saved items and the option to delete each of them*/}\r\n        <div className=\"wrapper displaySaved\">\r\n          <h2>Saved items:</h2>\r\n          {\r\n            this.state.savedAPOD.map((item) => {\r\n              return (\r\n                <div className=\"savedBox\" key={item.key}>\r\n                  <button className=\"savedItem\" id={item.title.date} onClick={this.saveDate}>{item.title.title}</button>\r\n                  <button className=\"deleteItem\" onClick={() => this.removeItem(item.key)}><span>Remove:</span> {item.title.title}</button>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport './Button.css'\r\n\r\nconst Button = props => {\r\n    return (\r\n        <button className={process.className}>{props.value}</button>\r\n    )\r\n}\r\n\r\nexport default Button"],"sourceRoot":""}